{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport mapboxgl from 'mapbox-gl';\nimport axios from 'axios';\nimport MapboxDraw from '@mapbox/mapbox-gl-draw';\nimport GeoTIFF from 'geotiff';\nexport default {\n  data() {\n    return {\n      map: null,\n      draw: null,\n      distanceMeasure: false,\n      markers: [],\n      files: [],\n      hoverCard: '',\n      hoverCardStyle: {\n        position: 'absolute',\n        top: '0',\n        left: '0'\n      }\n    };\n  },\n  mounted() {\n    mapboxgl.accessToken = 'YOUR_MAPBOX_ACCESS_TOKEN';\n    this.map = new mapboxgl.Map({\n      container: this.$refs.mapContainer,\n      style: 'mapbox://styles/mapbox/streets-v11',\n      center: [0, 0],\n      zoom: 2\n    });\n    this.draw = new MapboxDraw();\n    this.map.addControl(this.draw);\n    this.map.on('load', () => {\n      this.map.addControl(new mapboxgl.NavigationControl());\n      this.map.addControl(new mapboxgl.FullscreenControl());\n    });\n    this.map.on('draw.create', this.updateDistance);\n    this.map.on('draw.update', this.updateDistance);\n    this.map.on('draw.delete', this.updateDistance);\n    this.map.on('mousemove', e => {\n      const features = this.map.queryRenderedFeatures(e.point);\n      if (features.length) {\n        const feature = features[0];\n        this.hoverCard = `Type: ${feature.geometry.type}`;\n        this.hoverCardStyle.top = `${e.point.y}px`;\n        this.hoverCardStyle.left = `${e.point.x}px`;\n      } else {\n        this.hoverCard = '';\n      }\n    });\n  },\n  methods: {\n    toggleDraw() {\n      const drawStatus = this.draw.getMode();\n      if (drawStatus === 'draw_polygon') {\n        this.draw.changeMode('simple_select');\n      } else {\n        this.draw.changeMode('draw_polygon');\n      }\n    },\n    measureDistance() {\n      this.distanceMeasure = !this.distanceMeasure;\n      if (this.distanceMeasure) {\n        this.draw.changeMode('draw_line_string');\n      } else {\n        this.draw.changeMode('simple_select');\n      }\n    },\n    updateDistance() {\n      if (!this.distanceMeasure) return;\n      const data = this.draw.getAll();\n      const line = data.features[0];\n      if (line && line.geometry.type === 'LineString') {\n        const coordinates = line.geometry.coordinates;\n        let distance = 0;\n        for (let i = 0; i < coordinates.length - 1; i++) {\n          const [lng1, lat1] = coordinates[i];\n          const [lng2, lat2] = coordinates[i + 1];\n          distance += this.calculateDistance(lat1, lng1, lat2, lng2);\n        }\n        console.log(`Distance: ${distance.toFixed(2)} km`);\n      }\n    },\n    async uploadFile(event) {\n      const file = event.target.files[0];\n      const formData = new FormData();\n      formData.append('file', file);\n      try {\n        await axios.post('http://localhost:3000/upload', formData, {\n          headers: {\n            'Content-Type': 'multipart/form-data'\n          }\n        });\n        this.loadFiles();\n      } catch (error) {\n        console.error('Error uploading file:', error);\n        alert('Failed to upload file.');\n      }\n    },\n    calculateDistance(lat1, lng1, lat2, lng2) {\n      const R = 6371; // Earth radius in kilometers\n      const dLat = this.degToRad(lat2 - lat1);\n      const dLng = this.degToRad(lng2 - lng1);\n      const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.cos(this.degToRad(lat1)) * Math.cos(this.degToRad(lat2)) * Math.sin(dLng / 2) * Math.sin(dLng / 2);\n      const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n      return R * c;\n    },\n    degToRad(deg) {\n      return deg * (Math.PI / 180);\n    },\n    addMarker() {\n      this.map.on('click', e => {\n        const marker = new mapboxgl.Marker({\n          draggable: true\n        }).setLngLat(e.lngLat).addTo(this.map);\n        marker.on('dragend', () => {\n          const lngLat = marker.getLngLat();\n          console.log(`Marker moved to: ${lngLat.lng}, ${lngLat.lat}`);\n        });\n        this.markers.push(marker);\n        this.map.off('click');\n      });\n    },\n    async loadFiles() {\n      try {\n        const response = await axios.get('http://localhost:3000/files');\n        this.files = response.data;\n        this.files.forEach(file => {\n          if (file.endsWith('.geojson')) {\n            this.loadGeoJSON(file);\n          } else if (file.endsWith('.tiff')) {\n            this.loadTIFF(file);\n          }\n        });\n      } catch (error) {\n        console.error('Error loading files:', error);\n        alert('Failed to load files.');\n      }\n    },\n    loadGeoJSON(file) {\n      axios.get(`http://localhost:3000/uploads/${file}`).then(response => {\n        this.map.addSource(file, {\n          type: 'geojson',\n          data: response.data\n        });\n        this.map.addLayer({\n          id: file,\n          type: 'line',\n          source: file,\n          paint: {\n            'line-color': '#888',\n            'line-width': 2\n          }\n        });\n      }).catch(error => {\n        console.error('Error loading GeoJSON:', error);\n        alert('Failed to load GeoJSON file.');\n      });\n    },\n    async loadTIFF(file) {\n      try {\n        const response = await axios.get(`http://localhost:3000/uploads/${file}`, {\n          responseType: 'arraybuffer'\n        });\n        const tiff = await GeoTIFF.fromArrayBuffer(response.data);\n        const image = await tiff.getImage();\n        const rasters = await image.readRasters();\n        const canvas = document.createElement('canvas');\n        canvas.width = image.getWidth();\n        canvas.height = image.getHeight();\n        const ctx = canvas.getContext('2d');\n        const imageData = ctx.createImageData(canvas.width, canvas.height);\n\n        // Assuming the TIFF has a single band (grayscale image)\n        for (let i = 0; i < rasters[0].length; i++) {\n          imageData.data[i * 4] = rasters[0][i]; // R value\n          imageData.data[i * 4 + 1] = rasters[0][i]; // G value\n          imageData.data[i * 4 + 2] = rasters[0][i]; // B value\n          imageData.data[i * 4 + 3] = 255; // A value (opacity)\n        }\n        ctx.putImageData(imageData, 0, 0);\n        const url = canvas.toDataURL();\n        this.map.addSource(file, {\n          type: 'image',\n          url: url,\n          coordinates: [[image.getOrigin()[0], image.getOrigin()[1]], [image.getOrigin()[0] + image.getResolution()[0] * image.getWidth(), image.getOrigin()[1]], [image.getOrigin()[0] + image.getResolution()[0] * image.getWidth(), image.getOrigin()[1] + image.getResolution()[1] * image.getHeight()], [image.getOrigin()[0], image.getOrigin()[1] + image.getResolution()[1] * image.getHeight()]]\n        });\n        this.map.addLayer({\n          id: file,\n          source: file,\n          type: 'raster'\n        });\n      } catch (error) {\n        console.error('Error loading TIFF:', error);\n        alert('Failed to load TIFF file.');\n      }\n    },\n    showHoverCard(file) {\n      this.hoverCard = `File: ${file}`;\n    }\n  }\n};","map":{"version":3,"names":["mapboxgl","axios","MapboxDraw","GeoTIFF","data","map","draw","distanceMeasure","markers","files","hoverCard","hoverCardStyle","position","top","left","mounted","accessToken","Map","container","$refs","mapContainer","style","center","zoom","addControl","on","NavigationControl","FullscreenControl","updateDistance","e","features","queryRenderedFeatures","point","length","feature","geometry","type","y","x","methods","toggleDraw","drawStatus","getMode","changeMode","measureDistance","getAll","line","coordinates","distance","i","lng1","lat1","lng2","lat2","calculateDistance","console","log","toFixed","uploadFile","event","file","target","formData","FormData","append","post","headers","loadFiles","error","alert","R","dLat","degToRad","dLng","a","Math","sin","cos","c","atan2","sqrt","deg","PI","addMarker","marker","Marker","draggable","setLngLat","lngLat","addTo","getLngLat","lng","lat","push","off","response","get","forEach","endsWith","loadGeoJSON","loadTIFF","then","addSource","addLayer","id","source","paint","catch","responseType","tiff","fromArrayBuffer","image","getImage","rasters","readRasters","canvas","document","createElement","width","getWidth","height","getHeight","ctx","getContext","imageData","createImageData","putImageData","url","toDataURL","getOrigin","getResolution","showHoverCard"],"sources":["E:\\geospatial-app\\src\\components\\MapComponent.vue"],"sourcesContent":["<template>\r\n    <div>\r\n        <h2>Map</h2>\r\n        <div ref=\"mapContainer\" class=\"map-container\"></div>\r\n        <button @click=\"toggleDraw\">Draw</button>\r\n        <button @click=\"measureDistance\">Measure Distance</button>\r\n        <button @click=\"addMarker\">Add Marker</button>\r\n         <div v-if=\"hoverCard\" class=\"hover-card\" :style=\"hoverCardStyle\">\r\n            <p>{{ hoverCard }}</p>\r\n        </div>\r\n        <input type=\"file\" @change=\"uploadFile\" />\r\n        <button @click=\"loadFiles\">Load Files</button>\r\n        <div v-for=\"file in files\" :key=\"file\" @mouseover=\"showHoverCard(file)\">\r\n            {{ file }}\r\n        </div>\r\n        <div v-if=\"hoverCard\" class=\"hover-card\">\r\n            <p>{{ hoverCard }}</p>\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport mapboxgl from 'mapbox-gl';\r\nimport axios from 'axios';\r\nimport MapboxDraw from '@mapbox/mapbox-gl-draw';\r\nimport GeoTIFF from 'geotiff';\r\n\r\nexport default {\r\n    data() {\r\n        return {\r\n            map: null,\r\n            draw: null,\r\n            distanceMeasure: false,\r\n            markers: [],\r\n            files: [],\r\n            hoverCard: '',\r\n            hoverCardStyle: {\r\n                position: 'absolute',\r\n                top: '0',\r\n                left: '0'\r\n            }\r\n        };\r\n    },\r\n    mounted() {\r\n        mapboxgl.accessToken = 'YOUR_MAPBOX_ACCESS_TOKEN';\r\n        this.map = new mapboxgl.Map({\r\n            container: this.$refs.mapContainer,\r\n            style: 'mapbox://styles/mapbox/streets-v11',\r\n            center: [0, 0],\r\n            zoom: 2\r\n        });\r\n\r\n        this.draw = new MapboxDraw();\r\n        this.map.addControl(this.draw);\r\n\r\n        this.map.on('load', () => {\r\n            this.map.addControl(new mapboxgl.NavigationControl());\r\n            this.map.addControl(new mapboxgl.FullscreenControl());\r\n        });\r\n\r\n        this.map.on('draw.create', this.updateDistance);\r\n        this.map.on('draw.update', this.updateDistance);\r\n        this.map.on('draw.delete', this.updateDistance);\r\n\r\n        this.map.on('mousemove', (e) => {\r\n            const features = this.map.queryRenderedFeatures(e.point);\r\n            if (features.length) {\r\n                const feature = features[0];\r\n                this.hoverCard = `Type: ${feature.geometry.type}`;\r\n                this.hoverCardStyle.top = `${e.point.y}px`;\r\n                this.hoverCardStyle.left = `${e.point.x}px`;\r\n            } else {\r\n                this.hoverCard = '';\r\n            }\r\n        });\r\n    },\r\n    methods: {\r\n        toggleDraw() {\r\n            const drawStatus = this.draw.getMode();\r\n            if (drawStatus === 'draw_polygon') {\r\n                this.draw.changeMode('simple_select');\r\n            } else {\r\n                this.draw.changeMode('draw_polygon');\r\n            }\r\n        },\r\n        measureDistance() {\r\n            this.distanceMeasure = !this.distanceMeasure;\r\n            if (this.distanceMeasure) {\r\n                this.draw.changeMode('draw_line_string');\r\n            } else {\r\n                this.draw.changeMode('simple_select');\r\n            }\r\n        },\r\n        updateDistance() {\r\n            if (!this.distanceMeasure) return;\r\n\r\n            const data = this.draw.getAll();\r\n            const line = data.features[0];\r\n            if (line && line.geometry.type === 'LineString') {\r\n                const coordinates = line.geometry.coordinates;\r\n                let distance = 0;\r\n                for (let i = 0; i < coordinates.length - 1; i++) {\r\n                    const [lng1, lat1] = coordinates[i];\r\n                    const [lng2, lat2] = coordinates[i + 1];\r\n                    distance += this.calculateDistance(lat1, lng1, lat2, lng2);\r\n                }\r\n                console.log(`Distance: ${distance.toFixed(2)} km`);\r\n            }\r\n        },\r\n        async uploadFile(event) {\r\n            const file = event.target.files[0];\r\n            const formData = new FormData();\r\n            formData.append('file', file);\r\n            try {\r\n                await axios.post('http://localhost:3000/upload', formData, {\r\n                    headers: { 'Content-Type': 'multipart/form-data' }\r\n                });\r\n                this.loadFiles();\r\n            } catch (error) {\r\n                console.error('Error uploading file:', error);\r\n                alert('Failed to upload file.');\r\n            }\r\n        },\r\n        calculateDistance(lat1, lng1, lat2, lng2) {\r\n            const R = 6371; // Earth radius in kilometers\r\n            const dLat = this.degToRad(lat2 - lat1);\r\n            const dLng = this.degToRad(lng2 - lng1);\r\n            const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +\r\n                      Math.cos(this.degToRad(lat1)) * Math.cos(this.degToRad(lat2)) *\r\n                      Math.sin(dLng / 2) * Math.sin(dLng / 2);\r\n            const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\r\n            return R * c;\r\n        },\r\n        degToRad(deg) {\r\n            return deg * (Math.PI / 180);\r\n        },\r\n        addMarker() {\r\n            this.map.on('click', (e) => {\r\n                const marker = new mapboxgl.Marker({ draggable: true })\r\n                    .setLngLat(e.lngLat)\r\n                    .addTo(this.map);\r\n\r\n                marker.on('dragend', () => {\r\n                    const lngLat = marker.getLngLat();\r\n                    console.log(`Marker moved to: ${lngLat.lng}, ${lngLat.lat}`);\r\n                });\r\n\r\n                this.markers.push(marker);\r\n                this.map.off('click');\r\n            });\r\n        },\r\n        async loadFiles() {\r\n            try {\r\n                const response = await axios.get('http://localhost:3000/files');\r\n                this.files = response.data;\r\n                this.files.forEach(file => {\r\n                    if (file.endsWith('.geojson')) {\r\n                        this.loadGeoJSON(file);\r\n                    } else if (file.endsWith('.tiff')) {\r\n                        this.loadTIFF(file);\r\n                    }\r\n                });\r\n            } catch (error) {\r\n                console.error('Error loading files:', error);\r\n                alert('Failed to load files.');\r\n            }\r\n        },\r\n        loadGeoJSON(file) {\r\n            axios.get(`http://localhost:3000/uploads/${file}`)\r\n                .then(response => {\r\n                    this.map.addSource(file, {\r\n                        type: 'geojson',\r\n                        data: response.data\r\n                    });\r\n                    this.map.addLayer({\r\n                        id: file,\r\n                        type: 'line',\r\n                        source: file,\r\n                        paint: { 'line-color': '#888', 'line-width': 2 }\r\n                    });\r\n                })\r\n                .catch(error => {\r\n                console.error('Error loading GeoJSON:', error);\r\n                alert('Failed to load GeoJSON file.');\r\n            });\r\n        },\r\n        async loadTIFF(file) {\r\n            try {\r\n                const response = await axios.get(`http://localhost:3000/uploads/${file}`, { responseType: 'arraybuffer' });\r\n                const tiff = await GeoTIFF.fromArrayBuffer(response.data);\r\n                const image = await tiff.getImage();\r\n                const rasters = await image.readRasters();\r\n                const canvas = document.createElement('canvas');\r\n                canvas.width = image.getWidth();\r\n                canvas.height = image.getHeight();\r\n                const ctx = canvas.getContext('2d');\r\n                const imageData = ctx.createImageData(canvas.width, canvas.height);\r\n                \r\n                // Assuming the TIFF has a single band (grayscale image)\r\n                for (let i = 0; i < rasters[0].length; i++) {\r\n                    imageData.data[i * 4] = rasters[0][i];      // R value\r\n                    imageData.data[i * 4 + 1] = rasters[0][i];  // G value\r\n                    imageData.data[i * 4 + 2] = rasters[0][i];  // B value\r\n                    imageData.data[i * 4 + 3] = 255;            // A value (opacity)\r\n                }\r\n                ctx.putImageData(imageData, 0, 0);\r\n\r\n                const url = canvas.toDataURL();\r\n                this.map.addSource(file, {\r\n                    type: 'image',\r\n                    url: url,\r\n                    coordinates: [\r\n                        [image.getOrigin()[0], image.getOrigin()[1]],\r\n                        [image.getOrigin()[0] + image.getResolution()[0] * image.getWidth(), image.getOrigin()[1]],\r\n                        [image.getOrigin()[0] + image.getResolution()[0] * image.getWidth(), image.getOrigin()[1] + image.getResolution()[1] * image.getHeight()],\r\n                        [image.getOrigin()[0], image.getOrigin()[1] + image.getResolution()[1] * image.getHeight()]\r\n                    ]\r\n                });\r\n\r\n                this.map.addLayer({\r\n                    id: file,\r\n                    source: file,\r\n                    type: 'raster'\r\n                });\r\n            } catch (error) {\r\n                console.error('Error loading TIFF:', error);\r\n                alert('Failed to load TIFF file.');\r\n            }\r\n        },\r\n        showHoverCard(file) {\r\n            this.hoverCard = `File: ${file}`;\r\n        }\r\n    }\r\n};\r\n</script>\r\n\r\n<style>\r\n.map-container {\r\n    width: 100%;\r\n    height: 400px;\r\n}\r\n\r\n@media (max-width: 768px) {\r\n    .map-container {\r\n        height: 300px;\r\n    }\r\n}\r\n\r\n.hover-card {\r\n    position: absolute;\r\n    background-color: white;\r\n    border: 1px solid #ccc;\r\n    padding: 10px;\r\n    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\r\n    max-width: 200px;\r\n}\r\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}