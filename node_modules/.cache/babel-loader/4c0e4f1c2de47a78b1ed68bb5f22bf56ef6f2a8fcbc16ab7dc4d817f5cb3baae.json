{"ast":null,"code":"import { createElementVNode as _createElementVNode, toDisplayString as _toDisplayString, normalizeStyle as _normalizeStyle, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, renderList as _renderList, Fragment as _Fragment } from \"vue\";\nconst _hoisted_1 = /*#__PURE__*/_createElementVNode(\"h2\", null, \"Map\", -1 /* HOISTED */);\nconst _hoisted_2 = {\n  ref: \"mapContainer\",\n  class: \"map-container\"\n};\nconst _hoisted_3 = [\"onMouseover\"];\nconst _hoisted_4 = {\n  key: 1,\n  class: \"hover-card\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_hoisted_1, _createElementVNode(\"div\", _hoisted_2, null, 512 /* NEED_PATCH */), _createElementVNode(\"button\", {\n    onClick: _cache[0] || (_cache[0] = (...args) => $options.toggleDraw && $options.toggleDraw(...args))\n  }, \"Draw\"), _createElementVNode(\"button\", {\n    onClick: _cache[1] || (_cache[1] = (...args) => $options.measureDistance && $options.measureDistance(...args))\n  }, \"Measure Distance\"), _createElementVNode(\"button\", {\n    onClick: _cache[2] || (_cache[2] = (...args) => $options.addMarker && $options.addMarker(...args))\n  }, \"Add Marker\"), $data.hoverCard ? (_openBlock(), _createElementBlock(\"div\", {\n    key: 0,\n    class: \"hover-card\",\n    style: _normalizeStyle($data.hoverCardStyle)\n  }, [_createElementVNode(\"p\", null, _toDisplayString($data.hoverCard), 1 /* TEXT */)], 4 /* STYLE */)) : _createCommentVNode(\"v-if\", true), _createElementVNode(\"input\", {\n    type: \"file\",\n    onChange: _cache[3] || (_cache[3] = (...args) => $options.uploadFile && $options.uploadFile(...args))\n  }, null, 32 /* NEED_HYDRATION */), _createElementVNode(\"button\", {\n    onClick: _cache[4] || (_cache[4] = (...args) => $options.loadFiles && $options.loadFiles(...args))\n  }, \"Load Files\"), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.files, file => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: file,\n      onMouseover: $event => $options.showHoverCard(file)\n    }, _toDisplayString(file), 41 /* TEXT, PROPS, NEED_HYDRATION */, _hoisted_3);\n  }), 128 /* KEYED_FRAGMENT */)), $data.hoverCard ? (_openBlock(), _createElementBlock(\"div\", _hoisted_4, [_createElementVNode(\"p\", null, _toDisplayString($data.hoverCard), 1 /* TEXT */)])) : _createCommentVNode(\"v-if\", true)]);\n}","map":{"version":3,"names":["_createElementVNode","ref","class","key","_createElementBlock","_hoisted_1","_hoisted_2","onClick","_cache","args","$options","toggleDraw","measureDistance","addMarker","$data","hoverCard","style","_normalizeStyle","hoverCardStyle","_toDisplayString","_createCommentVNode","type","onChange","uploadFile","loadFiles","_Fragment","_renderList","files","file","onMouseover","$event","showHoverCard","_hoisted_3","_hoisted_4"],"sources":["E:\\geospatial-app\\src\\components\\MapComponent.vue"],"sourcesContent":["<template>\r\n    <div>\r\n        <h2>Map</h2>\r\n        <div ref=\"mapContainer\" class=\"map-container\"></div>\r\n        <button @click=\"toggleDraw\">Draw</button>\r\n        <button @click=\"measureDistance\">Measure Distance</button>\r\n        <button @click=\"addMarker\">Add Marker</button>\r\n         <div v-if=\"hoverCard\" class=\"hover-card\" :style=\"hoverCardStyle\">\r\n            <p>{{ hoverCard }}</p>\r\n        </div>\r\n        <input type=\"file\" @change=\"uploadFile\" />\r\n        <button @click=\"loadFiles\">Load Files</button>\r\n        <div v-for=\"file in files\" :key=\"file\" @mouseover=\"showHoverCard(file)\">\r\n            {{ file }}\r\n        </div>\r\n        <div v-if=\"hoverCard\" class=\"hover-card\">\r\n            <p>{{ hoverCard }}</p>\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport mapboxgl from 'mapbox-gl';\r\nimport axios from 'axios';\r\nimport MapboxDraw from '@mapbox/mapbox-gl-draw';\r\nimport GeoTIFF from 'geotiff';\r\n\r\nexport default {\r\n    data() {\r\n        return {\r\n            map: null,\r\n            draw: null,\r\n            distanceMeasure: false,\r\n            markers: [],\r\n            files: [],\r\n            hoverCard: '',\r\n            hoverCardStyle: {\r\n                position: 'absolute',\r\n                top: '0',\r\n                left: '0'\r\n            }\r\n        };\r\n    },\r\n    mounted() {\r\n        mapboxgl.accessToken = 'YOUR_MAPBOX_ACCESS_TOKEN';\r\n        this.map = new mapboxgl.Map({\r\n            container: this.$refs.mapContainer,\r\n            style: 'mapbox://styles/mapbox/streets-v11',\r\n            center: [0, 0],\r\n            zoom: 2\r\n        });\r\n\r\n        this.draw = new MapboxDraw();\r\n        this.map.addControl(this.draw);\r\n\r\n        this.map.on('load', () => {\r\n            this.map.addControl(new mapboxgl.NavigationControl());\r\n            this.map.addControl(new mapboxgl.FullscreenControl());\r\n        });\r\n\r\n        this.map.on('draw.create', this.updateDistance);\r\n        this.map.on('draw.update', this.updateDistance);\r\n        this.map.on('draw.delete', this.updateDistance);\r\n\r\n        this.map.on('mousemove', (e) => {\r\n            const features = this.map.queryRenderedFeatures(e.point);\r\n            if (features.length) {\r\n                const feature = features[0];\r\n                this.hoverCard = `Type: ${feature.geometry.type}`;\r\n                this.hoverCardStyle.top = `${e.point.y}px`;\r\n                this.hoverCardStyle.left = `${e.point.x}px`;\r\n            } else {\r\n                this.hoverCard = '';\r\n            }\r\n        });\r\n    },\r\n    methods: {\r\n        toggleDraw() {\r\n            const drawStatus = this.draw.getMode();\r\n            if (drawStatus === 'draw_polygon') {\r\n                this.draw.changeMode('simple_select');\r\n            } else {\r\n                this.draw.changeMode('draw_polygon');\r\n            }\r\n        },\r\n        measureDistance() {\r\n            this.distanceMeasure = !this.distanceMeasure;\r\n            if (this.distanceMeasure) {\r\n                this.draw.changeMode('draw_line_string');\r\n            } else {\r\n                this.draw.changeMode('simple_select');\r\n            }\r\n        },\r\n        updateDistance() {\r\n            if (!this.distanceMeasure) return;\r\n\r\n            const data = this.draw.getAll();\r\n            const line = data.features[0];\r\n            if (line && line.geometry.type === 'LineString') {\r\n                const coordinates = line.geometry.coordinates;\r\n                let distance = 0;\r\n                for (let i = 0; i < coordinates.length - 1; i++) {\r\n                    const [lng1, lat1] = coordinates[i];\r\n                    const [lng2, lat2] = coordinates[i + 1];\r\n                    distance += this.calculateDistance(lat1, lng1, lat2, lng2);\r\n                }\r\n                console.log(`Distance: ${distance.toFixed(2)} km`);\r\n            }\r\n        },\r\n        async uploadFile(event) {\r\n            const file = event.target.files[0];\r\n            const formData = new FormData();\r\n            formData.append('file', file);\r\n            try {\r\n                await axios.post('http://localhost:3000/upload', formData, {\r\n                    headers: { 'Content-Type': 'multipart/form-data' }\r\n                });\r\n                this.loadFiles();\r\n            } catch (error) {\r\n                console.error('Error uploading file:', error);\r\n                alert('Failed to upload file.');\r\n            }\r\n        },\r\n        calculateDistance(lat1, lng1, lat2, lng2) {\r\n            const R = 6371; // Earth radius in kilometers\r\n            const dLat = this.degToRad(lat2 - lat1);\r\n            const dLng = this.degToRad(lng2 - lng1);\r\n            const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +\r\n                      Math.cos(this.degToRad(lat1)) * Math.cos(this.degToRad(lat2)) *\r\n                      Math.sin(dLng / 2) * Math.sin(dLng / 2);\r\n            const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\r\n            return R * c;\r\n        },\r\n        degToRad(deg) {\r\n            return deg * (Math.PI / 180);\r\n        },\r\n        addMarker() {\r\n            this.map.on('click', (e) => {\r\n                const marker = new mapboxgl.Marker({ draggable: true })\r\n                    .setLngLat(e.lngLat)\r\n                    .addTo(this.map);\r\n\r\n                marker.on('dragend', () => {\r\n                    const lngLat = marker.getLngLat();\r\n                    console.log(`Marker moved to: ${lngLat.lng}, ${lngLat.lat}`);\r\n                });\r\n\r\n                this.markers.push(marker);\r\n                this.map.off('click');\r\n            });\r\n        },\r\n        async loadFiles() {\r\n            try {\r\n                const response = await axios.get('http://localhost:3000/files');\r\n                this.files = response.data;\r\n                this.files.forEach(file => {\r\n                    if (file.endsWith('.geojson')) {\r\n                        this.loadGeoJSON(file);\r\n                    } else if (file.endsWith('.tiff')) {\r\n                        this.loadTIFF(file);\r\n                    }\r\n                });\r\n            } catch (error) {\r\n                console.error('Error loading files:', error);\r\n                alert('Failed to load files.');\r\n            }\r\n        },\r\n        loadGeoJSON(file) {\r\n            axios.get(`http://localhost:3000/uploads/${file}`)\r\n                .then(response => {\r\n                    this.map.addSource(file, {\r\n                        type: 'geojson',\r\n                        data: response.data\r\n                    });\r\n                    this.map.addLayer({\r\n                        id: file,\r\n                        type: 'line',\r\n                        source: file,\r\n                        paint: { 'line-color': '#888', 'line-width': 2 }\r\n                    });\r\n                })\r\n                .catch(error => {\r\n                console.error('Error loading GeoJSON:', error);\r\n                alert('Failed to load GeoJSON file.');\r\n            });\r\n        },\r\n        async loadTIFF(file) {\r\n            try {\r\n                const response = await axios.get(`http://localhost:3000/uploads/${file}`, { responseType: 'arraybuffer' });\r\n                const tiff = await GeoTIFF.fromArrayBuffer(response.data);\r\n                const image = await tiff.getImage();\r\n                const rasters = await image.readRasters();\r\n                const canvas = document.createElement('canvas');\r\n                canvas.width = image.getWidth();\r\n                canvas.height = image.getHeight();\r\n                const ctx = canvas.getContext('2d');\r\n                const imageData = ctx.createImageData(canvas.width, canvas.height);\r\n                \r\n                // Assuming the TIFF has a single band (grayscale image)\r\n                for (let i = 0; i < rasters[0].length; i++) {\r\n                    imageData.data[i * 4] = rasters[0][i];      // R value\r\n                    imageData.data[i * 4 + 1] = rasters[0][i];  // G value\r\n                    imageData.data[i * 4 + 2] = rasters[0][i];  // B value\r\n                    imageData.data[i * 4 + 3] = 255;            // A value (opacity)\r\n                }\r\n                ctx.putImageData(imageData, 0, 0);\r\n\r\n                const url = canvas.toDataURL();\r\n                this.map.addSource(file, {\r\n                    type: 'image',\r\n                    url: url,\r\n                    coordinates: [\r\n                        [image.getOrigin()[0], image.getOrigin()[1]],\r\n                        [image.getOrigin()[0] + image.getResolution()[0] * image.getWidth(), image.getOrigin()[1]],\r\n                        [image.getOrigin()[0] + image.getResolution()[0] * image.getWidth(), image.getOrigin()[1] + image.getResolution()[1] * image.getHeight()],\r\n                        [image.getOrigin()[0], image.getOrigin()[1] + image.getResolution()[1] * image.getHeight()]\r\n                    ]\r\n                });\r\n\r\n                this.map.addLayer({\r\n                    id: file,\r\n                    source: file,\r\n                    type: 'raster'\r\n                });\r\n            } catch (error) {\r\n                console.error('Error loading TIFF:', error);\r\n                alert('Failed to load TIFF file.');\r\n            }\r\n        },\r\n        showHoverCard(file) {\r\n            this.hoverCard = `File: ${file}`;\r\n        }\r\n    }\r\n};\r\n</script>\r\n\r\n<style>\r\n.map-container {\r\n    width: 100%;\r\n    height: 400px;\r\n}\r\n\r\n@media (max-width: 768px) {\r\n    .map-container {\r\n        height: 300px;\r\n    }\r\n}\r\n\r\n.hover-card {\r\n    position: absolute;\r\n    background-color: white;\r\n    border: 1px solid #ccc;\r\n    padding: 10px;\r\n    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\r\n    max-width: 200px;\r\n}\r\n</style>"],"mappings":";gCAEQA,mBAAA,CAAY,YAAR,KAAG;;EACFC,GAAG,EAAC,cAAc;EAACC,KAAK,EAAC;;mBAHtC;;EAAAC,GAAA;EAe8BD,KAAK,EAAC;;;uBAdhCE,mBAAA,CAiBM,cAhBFC,UAAY,EACZL,mBAAA,CAAoD,OAApDM,UAAoD,+BACpDN,mBAAA,CAAyC;IAAhCO,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEC,QAAA,CAAAC,UAAA,IAAAD,QAAA,CAAAC,UAAA,IAAAF,IAAA,CAAU;KAAE,MAAI,GAChCT,mBAAA,CAA0D;IAAjDO,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEC,QAAA,CAAAE,eAAA,IAAAF,QAAA,CAAAE,eAAA,IAAAH,IAAA,CAAe;KAAE,kBAAgB,GACjDT,mBAAA,CAA8C;IAArCO,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEC,QAAA,CAAAG,SAAA,IAAAH,QAAA,CAAAG,SAAA,IAAAJ,IAAA,CAAS;KAAE,YAAU,GACzBK,KAAA,CAAAC,SAAS,I,cAApBX,mBAAA,CAEK;IATdD,GAAA;IAO+BD,KAAK,EAAC,YAAY;IAAEc,KAAK,EAPxDC,eAAA,CAO0DH,KAAA,CAAAI,cAAc;MAC5DlB,mBAAA,CAAsB,WAAAmB,gBAAA,CAAhBL,KAAA,CAAAC,SAAS,iB,oBAR3BK,mBAAA,gBAUQpB,mBAAA,CAA0C;IAAnCqB,IAAI,EAAC,MAAM;IAAEC,QAAM,EAAAd,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEC,QAAA,CAAAa,UAAA,IAAAb,QAAA,CAAAa,UAAA,IAAAd,IAAA,CAAU;qCACtCT,mBAAA,CAA8C;IAArCO,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEC,QAAA,CAAAc,SAAA,IAAAd,QAAA,CAAAc,SAAA,IAAAf,IAAA,CAAS;KAAE,YAAU,I,kBACrCL,mBAAA,CAEMqB,SAAA,QAddC,WAAA,CAY4BZ,KAAA,CAAAa,KAAK,EAAbC,IAAI;yBAAhBxB,mBAAA,CAEM;MAFsBD,GAAG,EAAEyB,IAAI;MAAGC,WAAS,EAAAC,MAAA,IAAEpB,QAAA,CAAAqB,aAAa,CAACH,IAAI;wBAC9DA,IAAI,yCAbnBI,UAAA;kCAemBlB,KAAA,CAAAC,SAAS,I,cAApBX,mBAAA,CAEM,OAFN6B,UAEM,GADFjC,mBAAA,CAAsB,WAAAmB,gBAAA,CAAhBL,KAAA,CAAAC,SAAS,iB,KAhB3BK,mBAAA,e","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}